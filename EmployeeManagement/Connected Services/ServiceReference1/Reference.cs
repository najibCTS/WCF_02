//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeeManagement.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/_22_WCF_Assignment_02")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpFnaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmpIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpLnaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dept {
            get {
                return this.DeptField;
            }
            set {
                if ((object.ReferenceEquals(this.DeptField, value) != true)) {
                    this.DeptField = value;
                    this.RaisePropertyChanged("Dept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpFna {
            get {
                return this.EmpFnaField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpFnaField, value) != true)) {
                    this.EmpFnaField = value;
                    this.RaisePropertyChanged("EmpFna");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmpId {
            get {
                return this.EmpIdField;
            }
            set {
                if ((this.EmpIdField.Equals(value) != true)) {
                    this.EmpIdField = value;
                    this.RaisePropertyChanged("EmpId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpLna {
            get {
                return this.EmpLnaField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpLnaField, value) != true)) {
                    this.EmpLnaField = value;
                    this.RaisePropertyChanged("EmpLna");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployee", ReplyAction="http://tempuri.org/IService1/AddEmployeeResponse")]
        bool AddEmployee(EmployeeManagement.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployee", ReplyAction="http://tempuri.org/IService1/AddEmployeeResponse")]
        System.Threading.Tasks.Task<bool> AddEmployeeAsync(EmployeeManagement.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetreiveEmployees", ReplyAction="http://tempuri.org/IService1/RetreiveEmployeesResponse")]
        EmployeeManagement.ServiceReference1.Employee[] RetreiveEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetreiveEmployees", ReplyAction="http://tempuri.org/IService1/RetreiveEmployeesResponse")]
        System.Threading.Tasks.Task<EmployeeManagement.ServiceReference1.Employee[]> RetreiveEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetreiveEmployeeByID", ReplyAction="http://tempuri.org/IService1/RetreiveEmployeeByIDResponse")]
        EmployeeManagement.ServiceReference1.Employee RetreiveEmployeeByID(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetreiveEmployeeByID", ReplyAction="http://tempuri.org/IService1/RetreiveEmployeeByIDResponse")]
        System.Threading.Tasks.Task<EmployeeManagement.ServiceReference1.Employee> RetreiveEmployeeByIDAsync(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEmployee", ReplyAction="http://tempuri.org/IService1/UpdateEmployeeResponse")]
        bool UpdateEmployee(EmployeeManagement.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEmployee", ReplyAction="http://tempuri.org/IService1/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(EmployeeManagement.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployee", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeResponse")]
        bool DeleteEmployee(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployee", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int employeeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : EmployeeManagement.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<EmployeeManagement.ServiceReference1.IService1>, EmployeeManagement.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddEmployee(EmployeeManagement.ServiceReference1.Employee employee) {
            return base.Channel.AddEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmployeeAsync(EmployeeManagement.ServiceReference1.Employee employee) {
            return base.Channel.AddEmployeeAsync(employee);
        }
        
        public EmployeeManagement.ServiceReference1.Employee[] RetreiveEmployees() {
            return base.Channel.RetreiveEmployees();
        }
        
        public System.Threading.Tasks.Task<EmployeeManagement.ServiceReference1.Employee[]> RetreiveEmployeesAsync() {
            return base.Channel.RetreiveEmployeesAsync();
        }
        
        public EmployeeManagement.ServiceReference1.Employee RetreiveEmployeeByID(int employeeId) {
            return base.Channel.RetreiveEmployeeByID(employeeId);
        }
        
        public System.Threading.Tasks.Task<EmployeeManagement.ServiceReference1.Employee> RetreiveEmployeeByIDAsync(int employeeId) {
            return base.Channel.RetreiveEmployeeByIDAsync(employeeId);
        }
        
        public bool UpdateEmployee(EmployeeManagement.ServiceReference1.Employee employee) {
            return base.Channel.UpdateEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(EmployeeManagement.ServiceReference1.Employee employee) {
            return base.Channel.UpdateEmployeeAsync(employee);
        }
        
        public bool DeleteEmployee(int employeeId) {
            return base.Channel.DeleteEmployee(employeeId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int employeeId) {
            return base.Channel.DeleteEmployeeAsync(employeeId);
        }
    }
}
